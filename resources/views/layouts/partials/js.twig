<!-- Vendor -->
<script src="{{ base_url() }}/js/{{ version('vendor.min.js') }}"></script>

<!-- Application -->
<script>
    var App = App || {};

    // Language

    var lang = 'en';

    switch ("{{ auth.user.language }}") {
        case 'es':
        case 'es_AR':
            lang = 'es';
            break;
        case 'pt':
        case 'pt_BR':
            lang = 'pt';
            break;
        default:
            lang = 'en';
    }

    // App

    App = {
        basePath: '{{ base_url() }}',
        settings: {
            lang: lang,
        },
        csrf: {
            '{{ csrf.tokenNameKey }}': '{{ csrf.tokenName }}',
            '{{ csrf.tokenValueKey }}': '{{ csrf.tokenValue }}',
        },
    };

    // Datatables

    $.extend($.fn.dataTable.defaults, {
        language: {
            url: '{{ base_url() }}/vendor/datatables/lang/' + App.settings.lang + '.json'
        },
        lengthMenu: [ 10, 50, 100 ],
        pageLength: 10,
        processing: true,
        autoWidth: false,
        dom: '<"row"<"col-sm-12"f>>tr<"row"<"col-sm-12"p>>',
    });

    // Datepicker

    $.extend($.fn.datepicker.defaults, {
        //TODO: Language format
        format: 'dd/mm/yyyy',
        autoclose: true,
        todayBtn: "linked",
        todayHighlight: true,
        language: App.settings.lang,
        assumeNearbyYear: true,
    });

    // Dropzone

    Dropzone.autoDiscover = false;

    // Moment

    moment.locale(App.settings.lang);
</script>

<script src="{{ base_url() }}/js/{{ version('app.min.js') }}"></script>
<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'

    function form() {
        return {
            method: 'post',
            url: '',
            submitting: false,
            model: {},
            errors: {},
            submit() {
                this.submitting = true
                this.errors = {}

                axios({
                    method: this.method,
                    url: this.url, 
                    data: {...this.model, ...App.csrf},
                }).then(
                    response => window.location.replace(response.data.redirect)
                ).catch(
                    (error) => {
                        this.submitting = false
                        this.errors = error.response.data
                    }
                )
            },
        }
    }

    function datatable() {
        return {
            isLoading: true,
            items: [],
            url: '',
            total: 0,
            currentPage: 1,
            lastPage: 1,
            perPage: 10,
            search: '',
            
            firstItem() {
                return this.perPage * this.currentPage - this.perPage + 1
            },

            lastItem() {
                let lastItem = this.perPage * this.currentPage
                
                if (lastItem > this.total) {
                    return this.total;
                }

                return this.perPage * this.currentPage
            },

            changePage(page) {
                if (this.currentPage === page) {
                    return
                }
                
                if (page < 1) {
                    this.currentPage = 1
                } else if (page > this.lastPage) {
                    this.currentPage = this.lastPage
                } else {
                    this.currentPage = page
                }

                this.loadData()
            },

            filter() {
                this.currentPage = 1
                this.loadData()
            },

            loadData() {
                this.isLoading = true

                let options = {
                    params: {
                        per_page: this.perPage,
                        page: this.currentPage,
                        search: this.search,
                        // orderBy: this.orderBy.column,
                        // orderDirection: this.orderBy.direction,
                    }
                }

                axios.get(this.url, options).then((response) => {
                    this.isLoading = false
                    this.items = response.data.items
                    this.total = response.data.total
                    this.lastPage = Math.max(Math.ceil(this.total / this.perPage), 1)
                })
            }
        }
    }
</script>